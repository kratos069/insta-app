// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  user_id, post_id, content
) VALUES (
  $1, $2, $3
)
RETURNING comment_id, post_id, user_id, content, created_at
`

type CreateCommentParams struct {
	UserID  int64  `json:"user_id"`
	PostID  int64  `json:"post_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.PostID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT comment_id, post_id, user_id, content, created_at FROM comments
WHERE comment_id = $1
`

func (q *Queries) GetCommentByID(ctx context.Context, commentID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsByPost = `-- name: ListCommentsByPost :many
SELECT comment_id, post_id, user_id, content, created_at FROM comments
WHERE post_id = $1
ORDER BY comment_id
`

func (q *Queries) ListCommentsByPost(ctx context.Context, postID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
